transformScale = function(px){
# Model is in scaled space, so transform back:
# Undo scale
px$curve.x = px$curve.x *
attr(numbers$number_numeric.log.scaled,"scaled:scale") +
attr(numbers$number_numeric.log.scaled,"scaled:center")
# Undo log
px$curve.x = exp(px$curve.x)
# Function to do the same for y
transform_y = function(y){
y + attr(numbers$local_alignment.center,"scaled:center")
}
intercept = coef(modelToPlot)[1]
px$curve.y = transform_y(px$curve.y + intercept)
px$curve.y.upper = transform_y(px$curve.y.upper+ intercept)
px$curve.y.lower = transform_y(px$curve.y.lower + intercept)
px$m2.dsig.incr = transform_y(px$m2.dsig.incr + intercept)
px$m2.dsig.decr = transform_y(px$m2.dsig.decr + intercept)
return(px)
}
px = transformScale(px)
pxDT = transformScale(pxDT)
# Plot the slopes alongside the raw data
px$type = "Same numeral typology"
pxDT$type = "Different numeral typology"
# Truncate curve for different numeral typology
pxDT[pxDT$curve.x<=10,]$curve.y = NA
pxDT[pxDT$curve.x<=10,]$m2.dsig.incr = NA
pxDT[pxDT$curve.x<=10,]$m2.dsig.decr = NA
pxDT[pxDT$curve.x<=10,]$curve.y.lower = NA
pxDT[pxDT$curve.x<=10,]$curve.y.upper = NA
pxAll = rbind(px,pxDT)
pxAll$type = factor(pxAll$type,levels = c("Same numeral typology","Different numeral typology"))
gamPlot <- ggplot(pxAll, aes(x=curve.x,y=curve.y,group=type))+
geom_violin(data=numbers[
numbers$danish_irregular=="FALSE" &
!((numbers$l1=="hu"| numbers$l2=="hu") & numbers$seven=="TRUE") &
!(numbers$homophone=="TRUE"),],
draw_quantiles = c(0.05, 0.5, 0.95),
fill = "grey80",scale="area",
aes(x=number_numeric,
y=local_alignment,
group=number_numeric))+
# 2nd curve
geom_ribbon(
aes(ymin=curve.y.lower,
ymax=curve.y.upper,
fill=type), alpha=0.2)+
geom_line(aes(x=curve.x,y=curve.y,colour=type),size=0.5,linetype=3) +
geom_line(aes(x=curve.x,y=m2.dsig.incr,colour=type), size = 2) +
geom_line(aes(x=curve.x,y=m2.dsig.decr,colour=type), size = 2) +
# Danish irregulars
geom_point(data=numbers[numbers$danish_irregular=="TRUE",],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=danirC,alpha=0.5) +
# Uralic 7s
geom_point(data=numbers[(numbers$l1=="hu"| numbers$l2=="hu") & numbers$seven=="TRUE",],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=hung7C,alpha=0.5) +
# Homophones
geom_point(data=numbers[numbers$homophone=="TRUE" &
(numbers$l1=="fr"| numbers$l2=="fr"),],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=homopC,alpha=0.5) +
# looks
xlab("Number")+
ylab("Local alignment") +
scale_x_continuous(trans = "log10",
breaks = c(1,2,3,4,5,6,7,8,10,
12,20,30,40,50,70,100,1000)) +
scale_color_manual(values=c(mainCurveC,curve2C),name="Comparisons between numbers with:")+
scale_fill_manual(values=c(mainCurveMutedC,curve2MutedC), name="fill") +
myThemeBasic+ guides(fill=F) + #labs(colour="XX") +
theme(legend.position = c(0.7,0.9),
axis.text.x = element_text(size=10),
axis.title.y = element_text(angle=0,vjust = 0.5)) +
xlab("Number")+ylab("Cross-\nlinguistic\nSemantic\nAlignment") +
annotate("text",x=3.75,y=0.2,label="Hungarian 7",colour=hung7C)+
annotate("text",x=70,y=0.4,label="Danish irregulars",colour=danirC) +
annotate("text",x=17.5,y=0.0,label="Homophones",colour=homopC) +
coord_cartesian(ylim=c(-0.1,1.25)) +
scale_y_continuous(breaks=c(0,0.5,1))
return(gamPlot)
}
gamPlot = makeFancyGam(m1)
pdf("../../results/numbers/FinalGamModel.pdf", width=7.5,height=4.5)
gamPlot
dev.off()
makeFancyGam = function(modelToPlot){
mainCurveC = "#15a7e6"
mainCurveMutedC = "#bfe8f9"
curve2C = "#fc5084"
curve2MutedC = "#febace"
hung7C = "#9cd927"
danirC = "#25a06e"
homopC = "#235f7b"
plot.new()
px = plotGAMSignificantSlopes(
modelToPlot,
'number_numeric.log.scaled',
'Number',termPlot=1, interactionTermValue = F)
pxDT = plotGAMSignificantSlopes(
modelToPlot,
'number_numeric.log.scaled',
'Number',termPlot=2,subPlot = 2,subPlotB=1, interactionTermValue = F,
interactionTermValueByVar= list(differentNumeralTypology=T))
transformScale = function(px){
# Model is in scaled space, so transform back:
# Undo scale
px$curve.x = px$curve.x *
attr(numbers$number_numeric.log.scaled,"scaled:scale") +
attr(numbers$number_numeric.log.scaled,"scaled:center")
# Undo log
px$curve.x = exp(px$curve.x)
# Function to do the same for y
transform_y = function(y){
y + attr(numbers$local_alignment.center,"scaled:center")
}
intercept = coef(modelToPlot)[1]
px$curve.y = transform_y(px$curve.y + intercept)
px$curve.y.upper = transform_y(px$curve.y.upper+ intercept)
px$curve.y.lower = transform_y(px$curve.y.lower + intercept)
px$m2.dsig.incr = transform_y(px$m2.dsig.incr + intercept)
px$m2.dsig.decr = transform_y(px$m2.dsig.decr + intercept)
return(px)
}
px = transformScale(px)
pxDT = transformScale(pxDT)
# Plot the slopes alongside the raw data
px$type = "Same numeral typology"
pxDT$type = "Different numeral typology"
# Truncate curve for different numeral typology
pxDT[pxDT$curve.x<=10,]$curve.y = NA
pxDT[pxDT$curve.x<=10,]$m2.dsig.incr = NA
pxDT[pxDT$curve.x<=10,]$m2.dsig.decr = NA
pxDT[pxDT$curve.x<=10,]$curve.y.lower = NA
pxDT[pxDT$curve.x<=10,]$curve.y.upper = NA
pxAll = rbind(px,pxDT)
pxAll$type = factor(pxAll$type,levels = c("Same numeral typology","Different numeral typology"))
gamPlot <- ggplot(pxAll, aes(x=curve.x,y=curve.y,group=type))+
geom_violin(data=numbers[
numbers$danish_irregular=="FALSE" &
!((numbers$l1=="hu"| numbers$l2=="hu") & numbers$seven=="TRUE") &
!(numbers$homophone=="TRUE"),],
draw_quantiles = c(0.05, 0.5, 0.95),
fill = "grey80",scale="area",
aes(x=number_numeric,
y=local_alignment,
group=number_numeric))+
# 2nd curve
geom_ribbon(
aes(ymin=curve.y.lower,
ymax=curve.y.upper,
fill=type), alpha=0.2)+
geom_line(aes(x=curve.x,y=curve.y,colour=type),size=0.5,linetype=3) +
geom_line(aes(x=curve.x,y=m2.dsig.incr,colour=type), size = 2) +
geom_line(aes(x=curve.x,y=m2.dsig.decr,colour=type), size = 2) +
# Danish irregulars
geom_point(data=numbers[numbers$danish_irregular=="TRUE",],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=danirC,alpha=0.5) +
# Uralic 7s
geom_point(data=numbers[(numbers$l1=="hu"| numbers$l2=="hu") & numbers$seven=="TRUE",],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=hung7C,alpha=0.5) +
# Homophones
geom_point(data=numbers[numbers$homophone=="TRUE" &
(numbers$l1=="fr"| numbers$l2=="fr"),],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=homopC,alpha=0.5) +
# looks
xlab("Number")+
ylab("Local alignment") +
scale_x_continuous(trans = "log10",
breaks = c(1,2,3,4,5,6,7,8,10,
12,20,30,40,50,70,100,1000)) +
scale_color_manual(values=c(mainCurveC,curve2C),name="Comparisons between numbers with:")+
scale_fill_manual(values=c(mainCurveMutedC,curve2MutedC), name="fill") +
myThemeBasic+ guides(fill=F) + #labs(colour="XX") +
theme(legend.position = c(0,0.9),
axis.text.x = element_text(size=10),
axis.title.y = element_text(angle=0,vjust = 0.5)) +
xlab("Number")+ylab("Cross-\nlinguistic\nSemantic\nAlignment") +
annotate("text",x=3.75,y=0.2,label="Hungarian 7",colour=hung7C)+
annotate("text",x=70,y=0.4,label="Danish irregulars",colour=danirC) +
annotate("text",x=17.5,y=0.0,label="Homophones",colour=homopC) +
coord_cartesian(ylim=c(-0.1,1.25)) +
scale_y_continuous(breaks=c(0,0.5,1))
return(gamPlot)
}
gamPlot = makeFancyGam(m1)
pdf("../../results/numbers/FinalGamModel.pdf", width=7.5,height=4.5)
gamPlot
dev.off()
makeFancyGam = function(modelToPlot){
mainCurveC = "#15a7e6"
mainCurveMutedC = "#bfe8f9"
curve2C = "#fc5084"
curve2MutedC = "#febace"
hung7C = "#9cd927"
danirC = "#25a06e"
homopC = "#235f7b"
plot.new()
px = plotGAMSignificantSlopes(
modelToPlot,
'number_numeric.log.scaled',
'Number',termPlot=1, interactionTermValue = F)
pxDT = plotGAMSignificantSlopes(
modelToPlot,
'number_numeric.log.scaled',
'Number',termPlot=2,subPlot = 2,subPlotB=1, interactionTermValue = F,
interactionTermValueByVar= list(differentNumeralTypology=T))
transformScale = function(px){
# Model is in scaled space, so transform back:
# Undo scale
px$curve.x = px$curve.x *
attr(numbers$number_numeric.log.scaled,"scaled:scale") +
attr(numbers$number_numeric.log.scaled,"scaled:center")
# Undo log
px$curve.x = exp(px$curve.x)
# Function to do the same for y
transform_y = function(y){
y + attr(numbers$local_alignment.center,"scaled:center")
}
intercept = coef(modelToPlot)[1]
px$curve.y = transform_y(px$curve.y + intercept)
px$curve.y.upper = transform_y(px$curve.y.upper+ intercept)
px$curve.y.lower = transform_y(px$curve.y.lower + intercept)
px$m2.dsig.incr = transform_y(px$m2.dsig.incr + intercept)
px$m2.dsig.decr = transform_y(px$m2.dsig.decr + intercept)
return(px)
}
px = transformScale(px)
pxDT = transformScale(pxDT)
# Plot the slopes alongside the raw data
px$type = "Same numeral typology"
pxDT$type = "Different numeral typology"
# Truncate curve for different numeral typology
pxDT[pxDT$curve.x<=10,]$curve.y = NA
pxDT[pxDT$curve.x<=10,]$m2.dsig.incr = NA
pxDT[pxDT$curve.x<=10,]$m2.dsig.decr = NA
pxDT[pxDT$curve.x<=10,]$curve.y.lower = NA
pxDT[pxDT$curve.x<=10,]$curve.y.upper = NA
pxAll = rbind(px,pxDT)
pxAll$type = factor(pxAll$type,levels = c("Same numeral typology","Different numeral typology"))
gamPlot <- ggplot(pxAll, aes(x=curve.x,y=curve.y,group=type))+
geom_violin(data=numbers[
numbers$danish_irregular=="FALSE" &
!((numbers$l1=="hu"| numbers$l2=="hu") & numbers$seven=="TRUE") &
!(numbers$homophone=="TRUE"),],
draw_quantiles = c(0.05, 0.5, 0.95),
fill = "grey80",scale="area",
aes(x=number_numeric,
y=local_alignment,
group=number_numeric))+
# 2nd curve
geom_ribbon(
aes(ymin=curve.y.lower,
ymax=curve.y.upper,
fill=type), alpha=0.2)+
geom_line(aes(x=curve.x,y=curve.y,colour=type),size=0.5,linetype=3) +
geom_line(aes(x=curve.x,y=m2.dsig.incr,colour=type), size = 2) +
geom_line(aes(x=curve.x,y=m2.dsig.decr,colour=type), size = 2) +
# Danish irregulars
geom_point(data=numbers[numbers$danish_irregular=="TRUE",],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=danirC,alpha=0.5) +
# Uralic 7s
geom_point(data=numbers[(numbers$l1=="hu"| numbers$l2=="hu") & numbers$seven=="TRUE",],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=hung7C,alpha=0.5) +
# Homophones
geom_point(data=numbers[numbers$homophone=="TRUE" &
(numbers$l1=="fr"| numbers$l2=="fr"),],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=homopC,alpha=0.5) +
# looks
xlab("Number")+
ylab("Local alignment") +
scale_x_continuous(trans = "log10",
breaks = c(1,2,3,4,5,6,7,8,10,
12,20,30,40,50,70,100,1000)) +
scale_color_manual(values=c(mainCurveC,curve2C),name="Comparisons between numbers with:")+
scale_fill_manual(values=c(mainCurveMutedC,curve2MutedC), name="fill") +
myThemeBasic+ guides(fill=F) + #labs(colour="XX") +
theme(legend.position = c(0.3,0.9),
axis.text.x = element_text(size=10),
axis.title.y = element_text(angle=0,vjust = 0.5)) +
xlab("Number")+ylab("Cross-\nlinguistic\nSemantic\nAlignment") +
annotate("text",x=3.75,y=0.2,label="Hungarian 7",colour=hung7C)+
annotate("text",x=70,y=0.4,label="Danish irregulars",colour=danirC) +
annotate("text",x=17.5,y=0.0,label="Homophones",colour=homopC) +
coord_cartesian(ylim=c(-0.1,1.25)) +
scale_y_continuous(breaks=c(0,0.5,1))
return(gamPlot)
}
gamPlot = makeFancyGam(m1)
pdf("../../results/numbers/FinalGamModel.pdf", width=7.5,height=4.5)
gamPlot
dev.off()
makeFancyGam = function(modelToPlot){
mainCurveC = "#15a7e6"
mainCurveMutedC = "#bfe8f9"
curve2C = "#fc5084"
curve2MutedC = "#febace"
hung7C = "#9cd927"
danirC = "#25a06e"
homopC = "#235f7b"
plot.new()
px = plotGAMSignificantSlopes(
modelToPlot,
'number_numeric.log.scaled',
'Number',termPlot=1, interactionTermValue = F)
pxDT = plotGAMSignificantSlopes(
modelToPlot,
'number_numeric.log.scaled',
'Number',termPlot=2,subPlot = 2,subPlotB=1, interactionTermValue = F,
interactionTermValueByVar= list(differentNumeralTypology=T))
transformScale = function(px){
# Model is in scaled space, so transform back:
# Undo scale
px$curve.x = px$curve.x *
attr(numbers$number_numeric.log.scaled,"scaled:scale") +
attr(numbers$number_numeric.log.scaled,"scaled:center")
# Undo log
px$curve.x = exp(px$curve.x)
# Function to do the same for y
transform_y = function(y){
y + attr(numbers$local_alignment.center,"scaled:center")
}
intercept = coef(modelToPlot)[1]
px$curve.y = transform_y(px$curve.y + intercept)
px$curve.y.upper = transform_y(px$curve.y.upper+ intercept)
px$curve.y.lower = transform_y(px$curve.y.lower + intercept)
px$m2.dsig.incr = transform_y(px$m2.dsig.incr + intercept)
px$m2.dsig.decr = transform_y(px$m2.dsig.decr + intercept)
return(px)
}
px = transformScale(px)
pxDT = transformScale(pxDT)
# Plot the slopes alongside the raw data
px$type = "Same numeral typology"
pxDT$type = "Different numeral typology"
# Truncate curve for different numeral typology
pxDT[pxDT$curve.x<=10,]$curve.y = NA
pxDT[pxDT$curve.x<=10,]$m2.dsig.incr = NA
pxDT[pxDT$curve.x<=10,]$m2.dsig.decr = NA
pxDT[pxDT$curve.x<=10,]$curve.y.lower = NA
pxDT[pxDT$curve.x<=10,]$curve.y.upper = NA
pxAll = rbind(px,pxDT)
pxAll$type = factor(pxAll$type,levels = c("Same numeral typology","Different numeral typology"))
gamPlot <- ggplot(pxAll, aes(x=curve.x,y=curve.y,group=type))+
geom_violin(data=numbers[
numbers$danish_irregular=="FALSE" &
!((numbers$l1=="hu"| numbers$l2=="hu") & numbers$seven=="TRUE") &
!(numbers$homophone=="TRUE"),],
draw_quantiles = c(0.05, 0.5, 0.95),
fill = "grey80",scale="area",
aes(x=number_numeric,
y=local_alignment,
group=number_numeric))+
# 2nd curve
geom_ribbon(
aes(ymin=curve.y.lower,
ymax=curve.y.upper,
fill=type), alpha=0.2)+
geom_line(aes(x=curve.x,y=curve.y,colour=type),size=0.5,linetype=3) +
geom_line(aes(x=curve.x,y=m2.dsig.incr,colour=type), size = 2) +
geom_line(aes(x=curve.x,y=m2.dsig.decr,colour=type), size = 2) +
# Danish irregulars
geom_point(data=numbers[numbers$danish_irregular=="TRUE",],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=danirC,alpha=0.5) +
# Uralic 7s
geom_point(data=numbers[(numbers$l1=="hu"| numbers$l2=="hu") & numbers$seven=="TRUE",],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=hung7C,alpha=0.5) +
# Homophones
geom_point(data=numbers[numbers$homophone=="TRUE" &
(numbers$l1=="fr"| numbers$l2=="fr"),],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=homopC,alpha=0.5) +
# looks
xlab("Number")+
ylab("Local alignment") +
scale_x_continuous(trans = "log10",
breaks = c(1,2,3,4,5,6,7,8,10,
12,20,30,40,50,70,100,1000)) +
scale_color_manual(values=c(mainCurveC,curve2C),name="Comparisons between numbers with:")+
scale_fill_manual(values=c(mainCurveMutedC,curve2MutedC), name="fill") +
myThemeBasic+ guides(fill=F) + #labs(colour="XX") +
theme(legend.position = c(0.3,0.85),
axis.text.x = element_text(size=10),
axis.title.y = element_text(angle=0,vjust = 0.5)) +
xlab("Number")+ylab("Cross-\nlinguistic\nSemantic\nAlignment") +
annotate("text",x=3.75,y=0.2,label="Hungarian 7",colour=hung7C)+
annotate("text",x=70,y=0.4,label="Danish irregulars",colour=danirC) +
annotate("text",x=17.5,y=0.0,label="Homophones",colour=homopC) +
coord_cartesian(ylim=c(-0.1,1.25)) +
scale_y_continuous(breaks=c(0,0.5,1))
return(gamPlot)
}
gamPlot = makeFancyGam(m1)
pdf("../../results/numbers/FinalGamModel.pdf", width=7.5,height=4.5)
gamPlot
dev.off()
makeFancyGam = function(modelToPlot){
mainCurveC = "#15a7e6"
mainCurveMutedC = "#bfe8f9"
curve2C = "#fc5084"
curve2MutedC = "#febace"
hung7C = "#9cd927"
danirC = "#25a06e"
homopC = "#235f7b"
plot.new()
px = plotGAMSignificantSlopes(
modelToPlot,
'number_numeric.log.scaled',
'Number',termPlot=1, interactionTermValue = F)
pxDT = plotGAMSignificantSlopes(
modelToPlot,
'number_numeric.log.scaled',
'Number',termPlot=2,subPlot = 2,subPlotB=1, interactionTermValue = F,
interactionTermValueByVar= list(differentNumeralTypology=T))
transformScale = function(px){
# Model is in scaled space, so transform back:
# Undo scale
px$curve.x = px$curve.x *
attr(numbers$number_numeric.log.scaled,"scaled:scale") +
attr(numbers$number_numeric.log.scaled,"scaled:center")
# Undo log
px$curve.x = exp(px$curve.x)
# Function to do the same for y
transform_y = function(y){
y + attr(numbers$local_alignment.center,"scaled:center")
}
intercept = coef(modelToPlot)[1]
px$curve.y = transform_y(px$curve.y + intercept)
px$curve.y.upper = transform_y(px$curve.y.upper+ intercept)
px$curve.y.lower = transform_y(px$curve.y.lower + intercept)
px$m2.dsig.incr = transform_y(px$m2.dsig.incr + intercept)
px$m2.dsig.decr = transform_y(px$m2.dsig.decr + intercept)
return(px)
}
px = transformScale(px)
pxDT = transformScale(pxDT)
# Plot the slopes alongside the raw data
px$type = "Same numeral typology"
pxDT$type = "Different numeral typology"
# Truncate curve for different numeral typology
pxDT[pxDT$curve.x<=10,]$curve.y = NA
pxDT[pxDT$curve.x<=10,]$m2.dsig.incr = NA
pxDT[pxDT$curve.x<=10,]$m2.dsig.decr = NA
pxDT[pxDT$curve.x<=10,]$curve.y.lower = NA
pxDT[pxDT$curve.x<=10,]$curve.y.upper = NA
pxAll = rbind(px,pxDT)
pxAll$type = factor(pxAll$type,levels = c("Same numeral typology","Different numeral typology"))
gamPlot <- ggplot(pxAll, aes(x=curve.x,y=curve.y,group=type))+
geom_violin(data=numbers[
numbers$danish_irregular=="FALSE" &
!((numbers$l1=="hu"| numbers$l2=="hu") & numbers$seven=="TRUE") &
!(numbers$homophone=="TRUE"),],
draw_quantiles = c(0.05, 0.5, 0.95),
fill = "grey80",scale="area",
aes(x=number_numeric,
y=local_alignment,
group=number_numeric))+
# 2nd curve
geom_ribbon(
aes(ymin=curve.y.lower,
ymax=curve.y.upper,
fill=type), alpha=0.2)+
geom_line(aes(x=curve.x,y=curve.y,colour=type),size=0.5,linetype=3) +
geom_line(aes(x=curve.x,y=m2.dsig.incr,colour=type), size = 2) +
geom_line(aes(x=curve.x,y=m2.dsig.decr,colour=type), size = 2) +
# Danish irregulars
geom_point(data=numbers[numbers$danish_irregular=="TRUE",],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=danirC,alpha=0.5) +
# Uralic 7s
geom_point(data=numbers[(numbers$l1=="hu"| numbers$l2=="hu") & numbers$seven=="TRUE",],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=hung7C,alpha=0.5) +
# Homophones
geom_point(data=numbers[numbers$homophone=="TRUE" &
(numbers$l1=="fr"| numbers$l2=="fr"),],
aes(x=number_numeric,y=local_alignment,group=NULL),
colour=homopC,alpha=0.5) +
# looks
xlab("Number")+
ylab("Local alignment") +
scale_x_continuous(trans = "log10",
breaks = c(1,2,3,4,5,6,7,8,10,
12,20,30,40,50,70,100,1000)) +
scale_color_manual(values=c(mainCurveC,curve2C),name="Comparisons between numbers with:")+
scale_fill_manual(values=c(mainCurveMutedC,curve2MutedC), name="fill") +
myThemeBasic+ guides(fill=F) + #labs(colour="XX") +
theme(legend.position = c(0.3,0.88),
axis.text.x = element_text(size=10),
axis.title.y = element_text(angle=0,vjust = 0.5)) +
xlab("Number")+ylab("Cross-\nlinguistic\nSemantic\nAlignment") +
annotate("text",x=3.75,y=0.2,label="Hungarian 7",colour=hung7C)+
annotate("text",x=70,y=0.4,label="Danish irregulars",colour=danirC) +
annotate("text",x=17.5,y=0.0,label="Homophones",colour=homopC) +
coord_cartesian(ylim=c(-0.1,1.25)) +
scale_y_continuous(breaks=c(0,0.5,1))
return(gamPlot)
}
gamPlot = makeFancyGam(m1)
pdf("../../results/numbers/FinalGamModel.pdf", width=7.5,height=4.5)
gamPlot
dev.off()
