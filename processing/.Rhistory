coordPlot
ggplot(d[d$Concept_ID %in% c("Norden::N"),],
aes(latitude_diff,local_alignment)) +
coordPlot
ggplot(d[d$Concept_ID %in% c("Süden::N"),],
aes(latitude_diff,local_alignment)) +
coordPlot
ggplot(d[d$Concept_ID %in% c("Osten::N"),],
aes(longitude_diff,local_alignment)) +
coordPlot + ggtitle("East")
ggplot(d[d$Concept_ID %in% c("Westen::N"),],
aes(longitude_diff,local_alignment)) +
coordPlot + ggtitle("West")
ggplot(d[d$Concept_ID %in% c("Norden::N"),],
aes(latitude_diff,local_alignment)) +
coordPlot + ggtitle("North")
ggplot(d[d$Concept_ID %in% c("Süden::N"),],
aes(latitude_diff,local_alignment)) +
coordPlot + ggtitle("South")
cor.test(d[d$Concept_ID %in% c("Süden::N"),]$local_alignment,d[d$Concept_ID %in% c("Süden::N"),]$latitude_diff)
lm(d[d$Concept_ID %in% c("Süden::N"),]$local_alignment~d[d$Concept_ID %in% c("Süden::N"),]$latitude_diff)
summary(lm(d[d$Concept_ID %in% c("Süden::N"),]$local_alignment~d[d$Concept_ID %in% c("Süden::N"),]$latitude_diff))
plot(d[d$Concept_ID=="Berg::N",]$incline_diff,
d[d$Concept_ID=="Berg::N",]$local_alignment)
ggplot(d[d$Concept_ID=="Berg::N",],
aes(inclide_diff,local_alignment)) +
geom_point()
ggplot(d[d$Concept_ID=="Berg::N",],
aes(incline_diff,local_alignment)) +
geom_point()
plot(d[d$Concept_ID=="Berg::N",]$incline_diff,
d[d$Concept_ID=="Berg::N",]$local_alignment)
ggplot(d[d$Concept_ID=="Berg::N",],
aes(incline_diff,local_alignment)) +
geom_point()
sort(unique(d$Concept_ID))
dM = d[d$Concept_ID %in% c("Berg::N","Hügel::N"),]
dM = d[d$Concept_ID =="Berg::N",]
d$local_alignment_vs_mountain =
abs(d$local_alignment - dM[match(paste(d$l1,d$l2),paste(dM$l1,dM$l2)),]$local_alignment)
ggplot(d[d$Concept_ID=="Hügel::N",],
aes(incline_diff,local_alignment_vs_mountain)) + geom_point()
cor.test(d[d$Concept_ID=="Hügel::N",]$local_alignment_vs_mountain,d[d$Concept_ID=="Hügel::N",]$incline_diff)
?princomp
# Convert to wide, by lang pair local laignment difference by concept
library(dplyr)
?dplyr
dC %>% groub_by(l1,l2)
dC = d[d$Concept_ID %in% c("Osten::N","Westen::N","Norden::N","Süden::N"),]
dC %>% groub_by(l1,l2)
dC %>% group_by(l1,l2)
unique(d$Concept_ID)
ggplot(d[d$Concept_ID=="Schnee::N",], aes(latitude_diff,local_alignment)) + geom_point()
cor.test(d[d$Concept_ID=="Schnee::N",]$local_alignment,
d[d$Concept_ID=="Schnee::N",]$latitude_diff)
unique(d$Concept_ID)
ggplot(d[d$Concept_ID=="Frost::N",], aes(latitude_diff,local_alignment)) + geom_point()
try(setwd("~/Documents/Bristol/word2vec/word2vec_DPLACE/analysis/geography/"))
d = read.csv("../../data/geography/geographic-terms-nel.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
g = read.csv("../../data/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
head(d)
unique(d$Concept_ID)
setwd("~/Documents/Bristol/word2vec/word2vec_DPLACE/processing/")
library(chron)
library(RColorBrewer)
library(lattice)
library(ncdf)
install.packages("chron")
install.packages("ncdf")
library(chron)
library(RColorBrewer)
library(lattice)
library(ncdf)
library(ncdf4)
install.packages("ncdf4")
ncin <- open.ncdf("../data/geography/SBBX1880.Ts.GHCN.CL.PA.250")
library(ncdf4)
?`ncdf4-package`
ncin <- nc_open("../data/geography/SBBX1880.Ts.GHCN.CL.PA.250")
unique(d$Concept_ID)
p = read.delim("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.tsv",stringsAsFactors = F)
head(p)
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
head(p)
p2 = p %>% group_by(lat,long) %>% summarise(avg=mean(Precipitation))
library(dplyr)
p2 = p %>% group_by(lat,long) %>% summarise(avg=mean(Precipitation))
head(p)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
head(p2)
d = read.csv("../../data/geography/geographic-terms-nel.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
g = read.csv("../../data/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
d$latl1 = g[match(d$Glottocode_l1,g$id),]$latitude
d$latl2 = g[match(d$Glottocode_l2,g$id),]$latitude
d$longl1 = g[match(d$Glottocode_l1,g$id),]$longitude
d$longl2 = g[match(d$Glottocode_l2,g$id),]$longitude
setwd("~/Documents/Bristol/word2vec/word2vec_DPLACE/processing")
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
d = read.csv("../data/geography/geographic-terms-nel.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
g = read.csv("../../data/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
g = read.csv("../data/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
d$latl1 = g[match(d$Glottocode_l1,g$id),]$latitude
d$latl2 = g[match(d$Glottocode_l2,g$id),]$latitude
d$longl1 = g[match(d$Glottocode_l1,g$id),]$longitude
d$longl2 = g[match(d$Glottocode_l2,g$id),]$longitude
head(p2)
sort(unique(p2$Latitude))
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2$avg[grepl("S",p2$avg)] = paste0("-",p2$avg[grepl("S",p2$avg)])
p2$avg = gsub("[SN]","",p2$avg)
p2$avg = as.numeric(p2$avg)
head(p2$avg)
hist(p2$avg)
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2$avg[grepl("S",p2$avg)] = paste0("-",p2$avg[grepl("S",p2$avg)])
p2$avg
unique(p2$Latitude)
p2$Latitude[grepl("S",p2$avg)] = paste0("-",p2$Latitude[grepl("S",p2$Latitude)])
p2$Latitude = gsub("[SN]","",p2$aLatitudevg)
p2$Latitude = as.numeric(p2$Latitude)
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2$Latitude[grepl("S",p2$avg)] = paste0("-",p2$Latitude[grepl("S",p2$Latitude)])
p2$Latitude = gsub("[SN]","",p2$Latitude)
p2$Latitude = as.numeric(p2$Latitude)
p2$Latitude
hist(p2$Latitude)
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2$Latitude[grepl("S",p2$avg)] = paste0("-",p2$Latitude[grepl("S",p2$Latitude)])
p2$Latitude
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2$Latitude[grepl("S",p2$Latitude)] = paste0("-",p2$Latitude[grepl("S",p2$Latitude)])
p2$Latitude = gsub("[SN]","",p2$Latitude)
p2$Latitude = as.numeric(p2$Latitude)
hist(p2$Latitude)
unique(p2$Longitude)
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2$Latitude[grepl("S",p2$Latitude)] = paste0("-",p2$Latitude[grepl("S",p2$Latitude)])
p2$Latitude = gsub("[SN]","",p2$Latitude)
p2$Latitude = as.numeric(p2$Latitude)
p2$Longitude[grepl("W",p2$Latitude)] = paste0("-",p2$Longitude[grepl("W",p2$Longitude)])
p2$Longitude = gsub("[EW]","",p2$Longitude)
p2$Longitude = as.numeric(p2$Longitude)
head(p2$Longitude)
d = read.csv("../data/geography/geographic-terms-nel.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
g = read.csv("../data/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
d$latl1 = g[match(d$Glottocode_l1,g$id),]$latitude
d$latl2 = g[match(d$Glottocode_l2,g$id),]$latitude
d$longl1 = g[match(d$Glottocode_l1,g$id),]$longitude
d$longl2 = g[match(d$Glottocode_l2,g$id),]$longitude
outer(d$lat1,p2$Latitude,"-")
dim(d)
dim(p2)
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
dim(p2)
dim(p)
distLat = outer(d$lat1,p2$Latitude,"-")
library(chron)
library(RColorBrewer)
library(lattice)
library(ncdf4)
library(dplyr)
setwd("~/Documents/Bristol/word2vec/word2vec_DPLACE/processing")
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2$Latitude[grepl("S",p2$Latitude)] = paste0("-",p2$Latitude[grepl("S",p2$Latitude)])
p2$Latitude = gsub("[SN]","",p2$Latitude)
p2$Latitude = as.numeric(p2$Latitude)
p2$Longitude[grepl("W",p2$Latitude)] = paste0("-",p2$Longitude[grepl("W",p2$Longitude)])
p2$Longitude = gsub("[EW]","",p2$Longitude)
p2$Longitude = as.numeric(p2$Longitude)
d = read.csv("../data/geography/geographic-terms-nel.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
g = read.csv("../data/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
d$latl1 = g[match(d$Glottocode_l1,g$id),]$latitude
d$latl2 = g[match(d$Glottocode_l2,g$id),]$latitude
d$longl1 = g[match(d$Glottocode_l1,g$id),]$longitude
d$longl2 = g[match(d$Glottocode_l2,g$id),]$longitude
distLat = outer(d$lat1,p2$Latitude,"-")
dist = distLat + distLong
distLat = abs(outer(d$lat1,p2$Latitude,"-"))
distLong = abs(outer(d$longl1,p2$Longitude,"-"))
dist = distLat + distLong
dim(dist)
distLat = abs(outer(d$lat1,p2$Latitude,"-"))
dim(distLat)
distLat = outer(d$lat1,p2$Latitude,"-")
distLong = outer(d$longl1,p2$Longitude,"-")
dim(distLat)
?outer
distLat[1:6]
head(d$latl1)
head(p2$Latitude)
x = c(1,2,3,4)
y = c(3,5,6,3,1)
outer(x,y,'-')
typeof(x)
typeof(d$latl1)
typeof(p2$Latitude)
outer(d$lat1[1:6],p2$Latitude[1:4],"-")
outer(d$lat1[1:6],p2$Latitude[1:4]
p2$Latitude[1:4]
d$lat1[1:6]
distLat = outer(d$latl1,p2$Latitude,"-")
dim(distLat)
dim(d)
sapply(d,1,function(X){which(abs(X)==min(abs(X)))})
apply(d,1,function(X){which(abs(X)==min(abs(X)))})
dist = distLat + distLong
dim(dist)
dMatch = apply(dist,1,function(X){which(abs(X)==min(abs(X)))})
head(dMatch)
unique(p2$Latitude)
length(unique(p2$Latitude))
length(unique(p2$Longitude))
length(unique(p2$Latitude))*length(unique(p2$Longitude))
dim(p2)
5184*2
head(p2)
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
head(p2)
library(fields)
install.packages(
"fields"
)
library(fields)
?rdist.earth
library(fields)
dist = rdist.earth(d[,c("longl1",'latl1')],p2[,c("Longitude","Latitude")])
head(d[,c("longl1",'latl1')])
head(p2[,c("Longitude","Latitude")])
library(chron)
library(RColorBrewer)
library(lattice)
library(ncdf4)
library(dplyr)
setwd("~/Documents/Bristol/word2vec/word2vec_DPLACE/processing")
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2$Latitude[grepl("S",p2$Latitude)] = paste0("-",p2$Latitude[grepl("S",p2$Latitude)])
p2$Latitude = gsub("[SN]","",p2$Latitude)
p2$Latitude = as.numeric(p2$Latitude)
p2$Longitude[grepl("W",p2$Latitude)] = paste0("-",p2$Longitude[grepl("W",p2$Longitude)])
p2$Longitude = gsub("[EW]","",p2$Longitude)
p2$Longitude = as.numeric(p2$Longitude)
d = read.csv("../data/geography/geographic-terms-nel.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
g = read.csv("../data/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
d$latl1 = g[match(d$Glottocode_l1,g$id),]$latitude
d$latl2 = g[match(d$Glottocode_l2,g$id),]$latitude
d$longl1 = g[match(d$Glottocode_l1,g$id),]$longitude
d$longl2 = g[match(d$Glottocode_l2,g$id),]$longitude
library(fields)
dist = rdist.earth(d[,c("longl1",'latl1')],p2[,c("Longitude","Latitude")])
dim(dist)
dMatch = apply(dist,1,function(X){which(X==min(X))})
dMatch
p2[c(39,111),]
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2[c(39,111),]
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2$Latitude[grepl("S",p2$Latitude)] = paste0("-",p2$Latitude[grepl("S",p2$Latitude)])
p2$Latitude = gsub("[SN]","",p2$Latitude)
p2$Latitude = as.numeric(p2$Latitude)
p2$Longitude[grepl("W",p2$Latitude)] = paste0("-",p2$Longitude[grepl("W",p2$Longitude)])
unique(p2$Longitude)
library(chron)
library(RColorBrewer)
library(lattice)
library(ncdf4)
library(dplyr)
setwd("~/Documents/Bristol/word2vec/word2vec_DPLACE/processing")
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2$Latitude[grepl("S",p2$Latitude)] = paste0("-",p2$Latitude[grepl("S",p2$Latitude)])
p2$Latitude = gsub("[SN]","",p2$Latitude)
p2$Latitude = as.numeric(p2$Latitude)
p2$Longitude[grepl("W",p2$Longitude)] = paste0("-",p2$Longitude[grepl("W",p2$Longitude)])
p2$Longitude = gsub("[EW]","",p2$Longitude)
p2$Longitude = as.numeric(p2$Longitude)
d = read.csv("../data/geography/geographic-terms-nel.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
g = read.csv("../data/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
d$latl1 = g[match(d$Glottocode_l1,g$id),]$latitude
d$latl2 = g[match(d$Glottocode_l2,g$id),]$latitude
d$longl1 = g[match(d$Glottocode_l1,g$id),]$longitude
d$longl2 = g[match(d$Glottocode_l2,g$id),]$longitude
library(fields)
dist = rdist.earth(d[,c("longl1",'latl1')],p2[,c("Longitude","Latitude")])
dMatch = apply(dist,1,function(X){which(X==min(X))})
head(dMatch)
d$MeanPrecipitation = p2[dMatch,]$avg
dMatch = unlist(apply(dist,1,function(X){which(X==min(X))}))
d$MeanPrecipitation = p2[dMatch,]$avg
dim(dist)
dim(d)
length(dMatch)
dMatch = unlist(apply(dist,1,function(X){which(X==min(X))[1]}))
d$MeanPrecipitation = p2[dMatch,]$avg
d$MeanPrecipitationL1 = p2[dMatch,]$avg
colx = gray(d$MeanPrecipitationL1/max(d$MeanPrecipitationL1))
plot(d$longl1,d$latl1,col=colx,pch=16)
names(d)
plot(d$mean)
library(chron)
library(RColorBrewer)
library(lattice)
library(ncdf4)
library(dplyr)
setwd("~/Documents/Bristol/word2vec/word2vec_DPLACE/processing")
p = read.csv("../data/geography/NOAA-NCEP_CPC_CAMS_OPI_v0208_mean_prcp.csv",stringsAsFactors = F)
p2 = p %>% group_by(Longitude,Latitude) %>% summarise(avg=mean(Precipitation))
p2$Latitude[grepl("S",p2$Latitude)] = paste0("-",p2$Latitude[grepl("S",p2$Latitude)])
p2$Latitude = gsub("[SN]","",p2$Latitude)
p2$Latitude = as.numeric(p2$Latitude)
p2$Longitude[grepl("W",p2$Longitude)] = paste0("-",p2$Longitude[grepl("W",p2$Longitude)])
p2$Longitude = gsub("[EW]","",p2$Longitude)
p2$Longitude = as.numeric(p2$Longitude)
d = read.csv("../data/geography/geographic-terms-nel.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
g = read.csv("../data/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F, fileEncoding = "UTF-8",encoding = "UTF-8")
d$latl1 = g[match(d$Glottocode_l1,g$id),]$latitude
d$latl2 = g[match(d$Glottocode_l2,g$id),]$latitude
d$longl1 = g[match(d$Glottocode_l1,g$id),]$longitude
d$longl2 = g[match(d$Glottocode_l2,g$id),]$longitude
library(fields)
dist = rdist.earth(d[,c("longl1",'latl1')],p2[,c("Longitude","Latitude")])
dMatch = unlist(apply(dist,1,function(X){which(X==min(X))[1]}))
d$MeanPrecipitationL1 = p2[dMatch,]$avg
dist = rdist.earth(d[,c("longl2",'latl2')],p2[,c("Longitude","Latitude")])
dMatch = unlist(apply(dist,1,function(X){which(X==min(X))[1]}))
d$MeanPrecipitationL2 = p2[dMatch,]$avg
colx = gray(d$MeanPrecipitationL1/max(d$MeanPrecipitationL1))
plot(d$longl1,d$latl1,col=colx,pch=16)
sum(is.na(d$latl1))
plot(abs(d$MeanPrecipitationL1-d$MeanPrecipitationL2),d$local_alignment)
cor.test(abs(d$MeanPrecipitationL1-d$MeanPrecipitationL2),d$local_alignment)
unique(d$Concept_ID)
cor.test(abs(d[d$Concept_ID=="Regen::N",]$MeanPrecipitationL1-
d[d$Concept_ID=="Regen::N",]$MeanPrecipitationL2),
d[d$Concept_ID=="Regen::N",]$local_alignment)
plot(abs(d[d$Concept_ID=="Regen::N",]$MeanPrecipitationL1-
d[d$Concept_ID=="Regen::N",]$MeanPrecipitationL2),
d[d$Concept_ID=="Regen::N",]$local_alignment)
f = read.delim("../data/geography/ippc-data_observ_clim_10yrMeans_cfrsall/cfrs8190.dat",stringsAsFactors = F,skip=2)
dim(f)
f = read.delim("../data/geography/ippc-data_observ_clim_10yrMeans_cfrsall/cfrs8190.dat",stringsAsFactors = F,skip=2,header = F)
dim(f)
f = read.delim("../data/geography/ippc-data_observ_clim_10yrMeans_cfrsall/cfrs8190.dat",stringsAsFactors = F,skip=2,header = F,sep="\t")
dim(f)
head(g)
head(f)
f = read.delim("../data/geography/ippc-data_observ_clim_10yrMeans_cfrsall/cfrs8190.dat",stringsAsFactors = F,skip=2,header = F,sep="\t")
dim(f)
head(f)
f[1:4,1:4]
hist(f)
f[,1]
hist(f[,1])
y = seq(ymin,ymax,by=grd-grd_sz)
xmin = 0.25
ymin = -89.75
xmax = 359.75
ymax = 89.75
grd_sz = 0.50
y = seq(ymin,ymax,by=grd-grd_sz)
y = seq(ymin,ymax,by=grd_sz)
y
length(x)*length(y)
dim(f)
720*12
4320/12
12 * 360
image(f[1:360,1:720])
image(matrix(f[1:360,1:720]))
f[1:360,1:720]
dim(f)
dim(f[1:360,1:720])
image(as.matrix(f[1:360,1:720]))
image(t(as.matrix(f[1:360,1:720])))
length(y)
length(x)
x = seq(xmin,xmax,by=grd_sz)
length(x)
dim(f)
1440/360
f[121,]
unlist(f[121,])
hist(f[121,])
hist(f[,1])
hist(f[,2])
hist(f[,500])
f = read.delim("../data/geography/cru5_frost_frq_hd_1961-90/cru5_frost_frq_hd_61-9001.asc",stringsAsFactors = F,skip=2,header=F)
head(f)
dim(f)
f = read.delim("../data/geography/cru5_frost_frq_hd_1961-90/cru5_frost_frq_hd_61-9001.asc",stringsAsFactors = F,skip=2,header=F,sep="\t")
dim(f)
f = read.delim("../data/geography/cru5_frost_frq_hd_1961-90/cru5_frost_frq_hd_61-9001.asc",stringsAsFactors = F,skip=6,header=F,sep="\t")
dim(f)
f = read.delim("../data/geography/cru5_frost_frq_hd_1961-90/cru5_frost_frq_hd_61-9001.asc",stringsAsFactors = F,skip=6,header=F,sep=" ")
dim(f)
x = seq(xllcorner,by=grd_sz,length.out=720)
ncols = 720
nrows =360
xllcorner = -180
yllcorner =-90
cellsize = .5
x = seq(xllcorner,by=grd_sz,length.out=720)
x
y = seq(yllcorner,by=cellsize,length.out = 360)
x = seq(xllcorner,by=cellsize,length.out=720)
x
y
x = data.frame(matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,nrow=4)))
x
matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,nrow=4))
matrix(c(1,2,3,4,5,6,7,8,9,10,11,12),nrow=4)
x = data.frame(matrix(c(1,2,3,4,5,6,7,8,9,10,11,12),nrow=4))
unlist(x)
f2 = data.frame(
f = unlist(f),
x = rep(x,each=360),
y = rep(y,720)
)
dim(f)
dim(f)
dim(f2)
360*720
dist = rdist.earth(d[,c("longl1",'latl1')],f2[,c("long","lat")])
dMatch = unlist(apply(dist,1,function(X){which(X==min(X))[1]}))
d$FrostL1 = f2[dMatch,]$f
names(d2)
names(f2)
dim(f2)
# columns first
f2 = data.frame(
f = unlist(f),
long = rep(x,each=length(y)),
lat = rep(y,length.out=length(unlist(f)))
)
dim(f2)
dim(unlist(f))
length(unlist(f))
x
y = seq(yllcorner,by=cellsize,length.out = 360)
x = seq(xllcorner,by=cellsize,length.out=720)
f2 = data.frame(
f = unlist(f),
long = rep(x,each=length(y)),
lat = rep(y,length.out=length(unlist(f)))
)
dim(f2)
dist = rdist.earth(d[,c("longl1",'latl1')],f2[,c("long","lat")])
dMatch = unlist(apply(dist,1,function(X){which(X==min(X))[1]}))
d$FrostL1 = f2[dMatch,]$f
hist(d$FrostL1)
sum(is.na(d$FrostL1))
d$FrostL1
hist(f)
hist(unlist(f))
image(as.matrix(f))
col = gray(f2$f/max(f2$f))
f2$f/max(f2$f)
col = gray((f2$f+100)/max(f2$f))
col = gray((f2$f+100)/(100+max(f2$f)))
plot(f2$long,f2$lat,col=col,pch=16)
f = read.delim("../data/geography/cru5_frost_frq_hd_1961-90/cru5_frost_frq_hd_61-9001.asc",stringsAsFactors = F,skip=6,header=F,sep=" ")
ncols = 720
nrows =360
xllcorner = -180
yllcorner =-90
cellsize = .5
y = rev(seq(yllcorner,by=cellsize,length.out = 360))
x = seq(xllcorner,by=cellsize,length.out=720)
# columns first
f2 = data.frame(
f = unlist(f),
long = rep(x,each=length(y)),
lat = rep(y,length.out=length(unlist(f)))
)
f2 = f2[f2$f>=0,]
col = gray((f2$f+100)/(100+max(f2$f)))
#plot(f2$long,f2$lat,col=col,pch=16)
dist = rdist.earth(d[,c("longl1",'latl1')],f2[,c("long","lat")])
dMatch = unlist(apply(dist,1,function(X){which(X==min(X))[1]}))
d$FrostL1 = f2[dMatch,]$f
d$FrostL1
hist(d$FrostL1)
unique(d$Concept_ID)
sel = d$Concept_ID %in% c("Eis::N","Frost::N")
plot(abs(d[sel,]$MeanPrecipitationL1-
d[sel,]$MeanPrecipitationL2),
d[sel,]$local_alignment)
dist = rdist.earth(d[,c("longl2",'latl2')],f2[,c("long","lat")])
dMatch = unlist(apply(dist,1,function(X){which(X==min(X))[1]}))
d$FrostL2 = f2[dMatch,]$f
sel = d$Concept_ID %in% c("Eis::N","Frost::N")
plot(abs(d[sel,]$FrostL1-
d[sel,]$FrostL2),
d[sel,]$local_alignment)
sel = d$Concept_ID %in% c("Frost::N")
plot(abs(d[sel,]$FrostL1-
d[sel,]$FrostL2),
d[sel,]$local_alignment)
sel = d$Concept_ID %in% c("Frost::N")
cor.test(abs(d[sel,]$FrostL1-
d[sel,]$FrostL2),
d[sel,]$local_alignment)
