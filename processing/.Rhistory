independentVariables
2^5
modelNum = 14
dec2bin <- function(x, n) {
as.logical(as.integer((intToBits(x))))[1:n]
}
binaryNum = dec2bin(modelNum, length(independentVariables))
variablesToInclude = independentVariables[binaryNum]
# Create a formula by pasting together strings
formula1 = formula(paste("x ~",paste(variablesToInclude,collapse="+"),sep=""))
formula1
m= glm(formula1,data=d)
d
d = data.frame(
v1 = rnorm(100),
v2 = rnorm(100),
v3 = rnorm(100),
v4 = rnorm(100),
v5 = rnorm(100))
m= glm(formula1,data=d)
d
names(d)
head(d)
# Imaginary data
d = data.frame(
v1 = rnorm(100),
v2 = rnorm(100),
v3 = rnorm(100),
v4 = rnorm(100),
v5 = rnorm(100))
# list of all possible variables
independentVariables = c("v1","v2","v3","v4","v5")
# Get model number from command line input,
#  e.g. 1456
modelNum = as.numeric(commandArgs(trailingOnly=TRUE)[1])
# Convert a number to a binary format
dec2bin <- function(x, n) {
as.logical(as.integer((intToBits(x))))[1:n]
}
binaryNum = dec2bin(modelNum, length(independentVariables))
variablesToInclude = independentVariables[binaryNum]
# Create a formula by pasting together strings
formula1 = formula(paste("x ~",paste(variablesToInclude,collapse="+"),sep=""))
# Run the model
m= glm(formula1,data=d)
modelNum
modelNum = 14
dec2bin <- function(x, n) {
as.logical(as.integer((intToBits(x))))[1:n]
}
binaryNum = dec2bin(modelNum, length(independentVariables))
variablesToInclude = independentVariables[binaryNum]
# Create a formula by pasting together strings
formula1 = formula(paste("x ~",paste(variablesToInclude,collapse="+"),sep=""))
# Run the model
m= glm(formula1,data=d)
formula1
d = data.frame(
x = rnorm(100),
v1 = rnorm(100),
v2 = rnorm(100),
v3 = rnorm(100),
v4 = rnorm(100),
v5 = rnorm(100))
formula1 = formula(paste("x ~",paste(variablesToInclude,collapse="+"),sep=""))
m= glm(formula1,data=d)
AIC(m)
formula1
AIC(m)
setwd("/Users/sgroberts/Documents/Bristol/word2vec/word2vec_DPLACE/processing")
makeSplitstree = function(dists, filename){
header = paste("#nexus\n\nBEGIN Taxa;\nDIMENSIONS ntax=",nrow(dists),";\nTAXLABELS\n",collapse="")
taxlabels= paste(paste("[",1:nrow(dists),"] '",rownames(dists),"'",sep=''),collapse='\n')
header2 = paste("\n;\nEND;  [TAXA]\n\nBEGIN DISTANCES;\n        DIMENSIONS NTAX=" , nrow(dists),";  FORMAT  TRIANGLE=BOTH DIAGONAL LABELS=LEFT;\nMATRIX\n", collapse='')
rnames = paste("'",rownames(dists),"'",sep='')
mat = paste(paste(rnames,apply(dists,1,paste,collapse=' ')),collapse='\n')
header3 = "\n;\nEND;\n"
nexus = paste(header, taxlabels, header2, mat, header3, collapse='')
cat(nexus,file = filename)
}
# All FAIR langauges:
dists = read.csv("../results/EA_distances/CulturalDistances.csv", stringsAsFactors = F)
dists = dists[,2:ncol(dists)]
rownames(dists) = colnames(dists)
dists = as.matrix(dists)
makeSplitstree(dists, "../results/splitstree/CulturalDistances.nex")
### Just for langs in final analysis
l = read.csv("../data/FAIR_langauges_glotto_xdid.csv", stringsAsFactors = F)
ead = read.csv("../data/dplace-data-1.0/csv/EA_data.csv", stringsAsFactors = F)
ead.socid = unique(ead$soc_id)
final.langs = l[l$in.final.analysis & !is.na(l$soc.id) & l$soc.id %in% ead.socid,]$Language2
final.langs = final.langs[final.langs %in% rownames(dists)]
final.langs
sort(final.langs)
dists15 = dists[final.langs,final.langs]
makeSplitstree(dists15, "../results/splitstree/CulturalDistances_Final15.nex")
head(ead)
head(l)
col = read.csv("../results/splitstree/nodeColours.txt",sep="\t")
head(col)
col = read.csv("../results/splitstree/nodeColours.txt",sep="\t")
col$N
col$L
col = read.csv("../results/splitstree/nodeColours.txt",sep="\t",stringsAsFactors = F)
head(l)
l[match(gsub("'","",col$N),l$Language,]$autotyp.area
l[match(gsub("'","",col$N),l$Language),]$autotyp.area
gsub("'","",col$N)
l[match(gsub("'","",col$L),l$Language),]$autotyp.area
ling = read.csv("../data/FAIR/nel-wiki-k100-alignments-by-language-pair.csv", stringsAsFactors = F)
head(ling)
unique(ling$l1,)
setwd("/Users/sgroberts/Documents/Bristol/word2vec/word2vec_DPLACE/processing")
makeSplitstree = function(dists, filename){
header = paste("#nexus\n\nBEGIN Taxa;\nDIMENSIONS ntax=",nrow(dists),";\nTAXLABELS\n",collapse="")
taxlabels= paste(paste("[",1:nrow(dists),"] '",rownames(dists),"'",sep=''),collapse='\n')
header2 = paste("\n;\nEND;  [TAXA]\n\nBEGIN DISTANCES;\n        DIMENSIONS NTAX=" , nrow(dists),";  FORMAT  TRIANGLE=BOTH DIAGONAL LABELS=LEFT;\nMATRIX\n", collapse='')
rnames = paste("'",rownames(dists),"'",sep='')
mat = paste(paste(rnames,apply(dists,1,paste,collapse=' ')),collapse='\n')
header3 = "\n;\nEND;\n"
nexus = paste(header, taxlabels, header2, mat, header3, collapse='')
cat(nexus,file = filename)
}
# All FAIR langauges:
dists = read.csv("../results/EA_distances/CulturalDistances.csv", stringsAsFactors = F)
dists = dists[,2:ncol(dists)]
rownames(dists) = colnames(dists)
dists = as.matrix(dists)
makeSplitstree(dists, "../results/splitstree/CulturalDistances.nex")
### Just for langs in final analysis
l = read.csv("../data/FAIR_langauges_glotto_xdid.csv", stringsAsFactors = F)
cult = read.csv("../results/EA_distances/CulturalDistances_Long.csv", stringsAsFactors = F)
names(cult) = c("l1","l2","cult.dist")
cultLangs = unique(c(cult$Var1,cult$Var2))
l = read.csv("../data/FAIR_langauges_glotto_xdid.csv", stringsAsFactors = F)
g = read.csv("../data/glottolog-languoid.csv/languoid.csv", stringsAsFactors = F)
l$family = g[match(l$glotto,g$id),]$family_pk
l$family = g[match(l$family,g$pk),]$name
ling = read.csv(lingDistancesFile, stringsAsFactors = F)
ling = ling[!(ling$l1=="se" || ling$l2 == "se"),]
ling = ling[!(ling$l1=="sl" || ling$l2 == "sl"),]
cult$l1.iso2 = l[match(cult$l1,l$Language2),]$iso2
cult$l2.iso2 = l[match(cult$l2,l$Language2),]$iso2
fairisos = unique(c(ling$l1,ling$l2))
cultisos = unique(c(cult$l1.iso2, cult$l2.iso2))
cult = cult[(cult$l1.iso2 %in% fairisos) & (cult$l2.iso2 %in% fairisos),]
ling = ling[(ling$l1 %in% cultisos) & (ling$l2 %in% cultisos),]
lingDistancesFile = "../data/FAIR/nel-wiki-k100-alignments-by-language-pair.csv"
ling = read.csv(lingDistancesFile, stringsAsFactors = F)
ling = ling[!(ling$l1=="se" || ling$l2 == "se"),]
ling = ling[!(ling$l1=="sl" || ling$l2 == "sl"),]
cult$l1.iso2 = l[match(cult$l1,l$Language2),]$iso2
cult$l2.iso2 = l[match(cult$l2,l$Language2),]$iso2
fairisos = unique(c(ling$l1,ling$l2))
cultisos = unique(c(cult$l1.iso2, cult$l2.iso2))
setwd("/Users/sgroberts/Documents/Bristol/word2vec/word2vec_DPLACE/processing")
makeSplitstree = function(dists, filename){
header = paste("#nexus\n\nBEGIN Taxa;\nDIMENSIONS ntax=",nrow(dists),";\nTAXLABELS\n",collapse="")
taxlabels= paste(paste("[",1:nrow(dists),"] '",rownames(dists),"'",sep=''),collapse='\n')
header2 = paste("\n;\nEND;  [TAXA]\n\nBEGIN DISTANCES;\n        DIMENSIONS NTAX=" , nrow(dists),";  FORMAT  TRIANGLE=BOTH DIAGONAL LABELS=LEFT;\nMATRIX\n", collapse='')
rnames = paste("'",rownames(dists),"'",sep='')
mat = paste(paste(rnames,apply(dists,1,paste,collapse=' ')),collapse='\n')
header3 = "\n;\nEND;\n"
nexus = paste(header, taxlabels, header2, mat, header3, collapse='')
cat(nexus,file = filename)
}
# All FAIR langauges:
dists = read.csv("../results/EA_distances/CulturalDistances.csv", stringsAsFactors = F)
dists = dists[,2:ncol(dists)]
rownames(dists) = colnames(dists)
dists = as.matrix(dists)
makeSplitstree(dists, "../results/splitstree/CulturalDistances.nex")
### Just for langs in final analysis
l = read.csv("../data/FAIR_langauges_glotto_xdid.csv", stringsAsFactors = F)
cult = read.csv("../results/EA_distances/CulturalDistances_Long.csv", stringsAsFactors = F)
names(cult) = c("l1","l2","cult.dist")
cultLangs = unique(c(cult$Var1,cult$Var2))
l = read.csv("../data/FAIR_langauges_glotto_xdid.csv", stringsAsFactors = F)
g = read.csv("../data/glottolog-languoid.csv/languoid.csv", stringsAsFactors = F)
l$family = g[match(l$glotto,g$id),]$family_pk
l$family = g[match(l$family,g$pk),]$name
lingDistancesFile = "../data/FAIR/nel-wiki-k100-alignments-by-language-pair.csv"
ling = read.csv(lingDistancesFile, stringsAsFactors = F)
ling = ling[!(ling$l1=="se" || ling$l2 == "se"),]
ling = ling[!(ling$l1=="sl" || ling$l2 == "sl"),]
cult$l1.iso2 = l[match(cult$l1,l$Language2),]$iso2
cult$l2.iso2 = l[match(cult$l2,l$Language2),]$iso2
fairisos = unique(c(ling$l1,ling$l2))
cultisos = unique(c(cult$l1.iso2, cult$l2.iso2))
cult = cult[(cult$l1.iso2 %in% fairisos) & (cult$l2.iso2 %in% fairisos),]
ling = ling[(ling$l1 %in% cultisos) & (ling$l2 %in% cultisos),]
head(ling)
unique(c(ling$l1,ling$l2))
final.langs = l[l$in.final.analysis & !is.na(l$soc.id) & l$iso2 %in% unique(c(ling$l1,ling$l2)),]$Language2
final.langs
final.langs = l[l$in.final.analysis & l$iso2 %in% unique(c(ling$l1,ling$l2)),]$Language2
final.langs
length(unique(c(ling$l1,ling$l2)))
unique(c(ling$l1,ling$l2)) %in% l$iso2
final.langs = l[l$iso2 %in% unique(c(ling$l1,ling$l2)),]$Language2
final.langs
final.langs = final.langs[final.langs %in% rownames(dists)]
final.langs
dists15 = dists[final.langs,final.langs]
makeSplitstree(dists15, "../results/splitstree/CulturalDistances_Final15.nex")
l[match(gsub("'","",col$L),l$Language),]$autotyp.area
final.langs
names(dists15)
makeSplitstree(dists15, "../results/splitstree/CulturalDistances_Final15.nex")
paste("'",rownames(dists),"'")
paste0("'",rownames(dists),"'")
paste0("'",rownames(dists15),"'")
l[match(rownames(dists15),l$Language),]$autotyp.area
areas = l[match(rownames(dists15),l$Language),]$autotyp.area
table(areas)
length(table(areas))
library(RColorBrewer)
colours = brewer.pal(length(areas),"Set2")
colours = brewer.pal(length(unique(areas)),"Set2")
colours
colours = brewer.pal(length(unique(areas)),"Set2")
names(colours) = unique(areas)
areas.colours = colours[areas]
vlabels = data.frame(
num = 1:ncol(dists15),
L= paste0("'",rownames(dists15),"'"),
lc = colours
)
areas.colours
col2rgb(areas.colours)
apply(col2rgb(areas.colours),2,paste,sep=" ")
apply(col2rgb(areas.colours),2,paste,collapse=" ")
apply(col2rgb(areas.colours),2,paste,collapse=" ")
vlabels = data.frame(
num = 1:ncol(dists15),
L= paste0("'",rownames(dists15),"'"),
lc = paste0("lc=",areas.colours.text)
)
areas.colours.text = apply(col2rgb(areas.colours),2,paste,collapse=" ")
vlabels = data.frame(
num = 1:ncol(dists15),
L= paste0("'",rownames(dists15),"'"),
lc = paste0("lc=",areas.colours.text)
)
head(vlabels)
vlables.text = apply(vlabels,1,paste,sep=" ")
vlables.text
vlables.text = apply(vlabels,1,paste,collapse=" ")
vlables.text
paste0(
"VLABELS\n",
paste(vlabels.text,collapse=",\n"),
"\n;"
)
vlables.text = apply(vlabels,1,paste,collapse=" ")
vlables.text = paste0(
"VLABELS\n",
paste(vlabels.text,collapse=",\n"),
"\n;"
)
vlables.text = apply(vlabels,1,paste,collapse=" ")
vlables.text = paste0(
"VLABELS\n",
paste(vlables.text,collapse=",\n"),
"\n;"
)
vlables.text
setwd("/Users/sgroberts/Documents/Bristol/word2vec/word2vec_DPLACE/processing")
makeSplitstree = function(dists, filename){
header = paste("#nexus\n\nBEGIN Taxa;\nDIMENSIONS ntax=",nrow(dists),";\nTAXLABELS\n",collapse="")
taxlabels= paste(paste("[",1:nrow(dists),"] '",rownames(dists),"'",sep=''),collapse='\n')
header2 = paste("\n;\nEND;  [TAXA]\n\nBEGIN DISTANCES;\n        DIMENSIONS NTAX=" , nrow(dists),";  FORMAT  TRIANGLE=BOTH DIAGONAL LABELS=LEFT;\nMATRIX\n", collapse='')
rnames = paste("'",rownames(dists),"'",sep='')
mat = paste(paste(rnames,apply(dists,1,paste,collapse=' ')),collapse='\n')
header3 = "\n;\nEND;\n"
nexus = paste(header, taxlabels, header2, mat, header3, collapse='')
cat(nexus,file = filename)
}
# All FAIR langauges:
dists = read.csv("../results/EA_distances/CulturalDistances.csv", stringsAsFactors = F)
dists = dists[,2:ncol(dists)]
rownames(dists) = colnames(dists)
dists = as.matrix(dists)
makeSplitstree(dists, "../results/splitstree/CulturalDistances.nex")
### Just for langs in final analysis
l = read.csv("../data/FAIR_langauges_glotto_xdid.csv", stringsAsFactors = F)
cult = read.csv("../results/EA_distances/CulturalDistances_Long.csv", stringsAsFactors = F)
names(cult) = c("l1","l2","cult.dist")
cultLangs = unique(c(cult$Var1,cult$Var2))
l = read.csv("../data/FAIR_langauges_glotto_xdid.csv", stringsAsFactors = F)
g = read.csv("../data/glottolog-languoid.csv/languoid.csv", stringsAsFactors = F)
l$family = g[match(l$glotto,g$id),]$family_pk
l$family = g[match(l$family,g$pk),]$name
lingDistancesFile = "../data/FAIR/nel-wiki-k100-alignments-by-language-pair.csv"
ling = read.csv(lingDistancesFile, stringsAsFactors = F)
ling = ling[!(ling$l1=="se" || ling$l2 == "se"),]
ling = ling[!(ling$l1=="sl" || ling$l2 == "sl"),]
cult$l1.iso2 = l[match(cult$l1,l$Language2),]$iso2
cult$l2.iso2 = l[match(cult$l2,l$Language2),]$iso2
fairisos = unique(c(ling$l1,ling$l2))
cultisos = unique(c(cult$l1.iso2, cult$l2.iso2))
cult = cult[(cult$l1.iso2 %in% fairisos) & (cult$l2.iso2 %in% fairisos),]
ling = ling[(ling$l1 %in% cultisos) & (ling$l2 %in% cultisos),]
final.langs = l[l$iso2 %in% unique(c(ling$l1,ling$l2)),]$Language2
final.langs = final.langs[final.langs %in% rownames(dists)]
dists15 = dists[final.langs,final.langs]
makeSplitstree(dists15, "../results/splitstree/CulturalDistances_Final15.nex")
# Add colours:
areas = l[match(rownames(dists15),l$Language),]$autotyp.area
library(RColorBrewer)
colours = brewer.pal(length(unique(areas)),"Set2")
names(colours) = unique(areas)
areas.colours = colours[areas]
areas.colours.text = apply(col2rgb(areas.colours),2,paste,collapse=" ")
vlabels = data.frame(
num = 1:ncol(dists15),
L= paste0("'",rownames(dists15),"'"),
lc = paste0("lc=",areas.colours.text)
)
vlables.text = apply(vlabels,1,paste,collapse=" ")
vlables.text = paste0(
"VLABELS\n",
paste(vlables.text,collapse=",\n"),
"\n;"
)
vlables.text = apply(vlabels,1,paste,collapse=" ")
vlables.text = paste0(
"\nVLABELS\n",
paste(vlables.text,collapse=",\n"),
"\n;"
)
cat(vlabels.text,file="../results/splitstree/CulturalDistances_Final15.nex",append = T)
cat(vlables.text,file="../results/splitstree/CulturalDistances_Final15.nex",append = T)
dim(dists15)
sqrt(438)
makeSplitstree(dists15, "../results/splitstree/CulturalDistances_Final15.nex")
nodeColours =read.csv("../results/splitstree/nodeColours.txt",sep="\t",stringsAsFactors = F)
nodeColours$L
areas = l[match(gsub("'","",nodeColours$L),l$Language),]$autotyp.area
areas
library(RColorBrewer)
colours = brewer.pal(length(unique(areas)),"Set2")
names(colours) = unique(areas)
areas.colours = colours[areas]
areas.colours.text = apply(col2rgb(areas.colours),2,paste,collapse=" ")
vlabels = data.frame(
num = 1:ncol(dists15),
L= paste0("'",rownames(dists15),"'"),
lc = paste0("lc=",areas.colours.text)
)
vlables.text = apply(vlabels,1,paste,collapse=" ")
vlables.text = paste0(
"\nVLABELS\n",
paste(vlables.text,collapse=",\n"),
"\n;"
)
cat(vlables.text,file="../results/splitstree/nodeColours2.txt",append = T)
areas.colours
colours
legend(1,1,legend=names(colours),col=colours)
plot(1:2)
legend(1,1,legend=names(colours),col=colours)
legend(1,2,legend=names(colours),col=colours)
?legend
legend(1,2,legend=names(colours),text.col=colours)
plot(1:2)
legend(1,2,legend=names(colours),text.col=colours)
plot(1:2,type='n')
legend(1,2,legend=names(colours),text.col=colours)
plot(1:2,type='n',xaxt='n',yaxt='n')
legend(1,2,legend=names(colours),text.col=colours)
plot(1:2,type='n',xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
legend(1,2,legend=names(colours),text.col=colours)
setwd("/Users/sgroberts/Documents/Bristol/word2vec/word2vec_DPLACE/processing")
makeSplitstree = function(dists, filename){
header = paste("#nexus\n\nBEGIN Taxa;\nDIMENSIONS ntax=",nrow(dists),";\nTAXLABELS\n",collapse="")
taxlabels= paste(paste("[",1:nrow(dists),"] '",rownames(dists),"'",sep=''),collapse='\n')
header2 = paste("\n;\nEND;  [TAXA]\n\nBEGIN DISTANCES;\n        DIMENSIONS NTAX=" , nrow(dists),";  FORMAT  TRIANGLE=BOTH DIAGONAL LABELS=LEFT;\nMATRIX\n", collapse='')
rnames = paste("'",rownames(dists),"'",sep='')
mat = paste(paste(rnames,apply(dists,1,paste,collapse=' ')),collapse='\n')
header3 = "\n;\nEND;\n"
nexus = paste(header, taxlabels, header2, mat, header3, collapse='')
cat(nexus,file = filename)
}
# All FAIR langauges:
dists = read.csv("../results/EA_distances/CulturalDistances.csv", stringsAsFactors = F)
dists = dists[,2:ncol(dists)]
rownames(dists) = colnames(dists)
dists = as.matrix(dists)
makeSplitstree(dists, "../results/splitstree/CulturalDistances.nex")
### Just for langs in final analysis
l = read.csv("../data/FAIR_langauges_glotto_xdid.csv", stringsAsFactors = F)
cult = read.csv("../results/EA_distances/CulturalDistances_Long.csv", stringsAsFactors = F)
names(cult) = c("l1","l2","cult.dist")
cultLangs = unique(c(cult$Var1,cult$Var2))
l = read.csv("../data/FAIR_langauges_glotto_xdid.csv", stringsAsFactors = F)
g = read.csv("../data/glottolog-languoid.csv/languoid.csv", stringsAsFactors = F)
l$family = g[match(l$glotto,g$id),]$family_pk
l$family = g[match(l$family,g$pk),]$name
lingDistancesFile = "../data/FAIR/nel-wiki-k100-alignments-by-language-pair.csv"
ling = read.csv(lingDistancesFile, stringsAsFactors = F)
ling = ling[!(ling$l1=="se" || ling$l2 == "se"),]
ling = ling[!(ling$l1=="sl" || ling$l2 == "sl"),]
cult$l1.iso2 = l[match(cult$l1,l$Language2),]$iso2
cult$l2.iso2 = l[match(cult$l2,l$Language2),]$iso2
fairisos = unique(c(ling$l1,ling$l2))
cultisos = unique(c(cult$l1.iso2, cult$l2.iso2))
cult = cult[(cult$l1.iso2 %in% fairisos) & (cult$l2.iso2 %in% fairisos),]
ling = ling[(ling$l1 %in% cultisos) & (ling$l2 %in% cultisos),]
final.langs = l[l$iso2 %in% unique(c(ling$l1,ling$l2)),]$Language2
final.langs = final.langs[final.langs %in% rownames(dists)]
dists15 = dists[final.langs,final.langs]
makeSplitstree(dists15, "../results/splitstree/CulturalDistances_Final15.nex")
# Add colours:
nodeColours =read.csv("../results/splitstree/nodeColours.txt",sep="\t",stringsAsFactors = F)
areas = l[match(gsub("'","",nodeColours$L),l$Language),]$autotyp.area
library(RColorBrewer)
colours = brewer.pal(length(unique(areas)),"Set2")
names(colours) = unique(areas)
areas.colours = colours[areas]
areas.colours.text = apply(col2rgb(areas.colours),2,paste,collapse=" ")
vlabels = data.frame(
num = 1:ncol(dists15),
L= paste0("'",nodeColours$L,"'"),
lc = paste0("lc=",areas.colours.text)
)
vlables.text = apply(vlabels,1,paste,collapse=" ")
vlables.text = paste0(
"\nVLABELS\n",
paste(vlables.text,collapse=",\n"),
"\n;"
)
plot(1:2,type='n',xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
legend(1,2,legend=names(colours),text.col=colours)
cat(vlables.text,file="../results/splitstree/nodeColours2.txt",append = F)
makeSplitstree(dists15, "../results/splitstree/CulturalDistances_Final15.nex")
nodeColours =read.csv("../results/splitstree/nodeColours.txt",sep="\t",stringsAsFactors = F)
areas = l[match(gsub("'","",nodeColours$L),l$Language),]$autotyp.area
library(RColorBrewer)
colours = brewer.pal(length(unique(areas)),"Set2")
names(colours) = unique(areas)
areas.colours = colours[areas]
areas.colours.text = apply(col2rgb(areas.colours),2,paste,collapse=" ")
vlabels = data.frame(
num = 1:ncol(dists15),
L= paste0("'",nodeColours$L,"'"),
lc = paste0("lc=",areas.colours.text)
)
vlables.text = apply(vlabels,1,paste,collapse=" ")
vlables.text = paste0(
"\nVLABELS\n",
paste(vlables.text,collapse=",\n"),
"\n;"
)
plot(1:2,type='n',xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
legend(1,2,legend=names(colours),text.col=colours)
cat(vlables.text,file="../results/splitstree/nodeColours2.txt",append = F)
colours
plot(1:6,col=colours)
head(l)
l[l$Language=="Albanian",]
l[l$Language=="Armenian",]
l[l$Language=="Estonian",]
l$family
nodeColours =read.csv("../results/splitstree/nodeColours.txt",sep="\t",stringsAsFactors = F)
areas = l[match(gsub("'","",nodeColours$L),l$Language),]$family
l$family
library(RColorBrewer)
colours = brewer.pal(length(unique(areas)),"Set2")
names(colours) = unique(areas)
areas.colours = colours[areas]
areas.colours.text = apply(col2rgb(areas.colours),2,paste,collapse=" ")
vlabels = data.frame(
num = 1:ncol(dists15),
L= paste0("'",nodeColours$L,"'"),
lc = paste0("lc=",areas.colours.text)
)
vlables.text = apply(vlabels,1,paste,collapse=" ")
vlables.text = paste0(
"\nVLABELS\n",
paste(vlables.text,collapse=",\n"),
"\n;"
)
plot(1:2,type='n',xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
legend(1,2,legend=names(colours),text.col=colours)
cat(vlables.text,file="../results/splitstree/nodeColours2.txt",append = F)
length(unique(areas))
display.brewer.all()
nodeColours =read.csv("../results/splitstree/nodeColours.txt",sep="\t",stringsAsFactors = F)
areas = l[match(gsub("'","",nodeColours$L),l$Language),]$family
library(RColorBrewer)
colours = brewer.pal(length(unique(areas)),"Set1")
names(colours) = unique(areas)
areas.colours = colours[areas]
areas.colours.text = apply(col2rgb(areas.colours),2,paste,collapse=" ")
vlabels = data.frame(
num = 1:ncol(dists15),
L= paste0("'",nodeColours$L,"'"),
lc = paste0("lc=",areas.colours.text)
)
vlables.text = apply(vlabels,1,paste,collapse=" ")
vlables.text = paste0(
"\nVLABELS\n",
paste(vlables.text,collapse=",\n"),
"\n;"
)
plot(1:2,type='n',xaxt='n',yaxt='n',bty='n',xlab='',ylab='')
legend(1,2,legend=names(colours),text.col=colours)
cat(vlables.text,file="../results/splitstree/nodeColours2.txt",append = F)
cat(vlables.text,file="../results/splitstree/nodeColours2.txt",append = F)
colours
areas.colours.text
