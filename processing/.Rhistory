which(cult$l1.iso2==ling$l1[i] & cult$l2.iso2==ling$l2[i])
})
ling$cult.dist = cult[matches,]$cult.dist
ling$cult.dist.center = scale(ling$cult.dist)
cdc.s = attr(ling$cult.dist.center,"scaled:scale")
cdc.c = attr(ling$cult.dist.center,"scaled:center")
ling$cult.dist.center = as.numeric(ling$cult.dist.center)
ling$family1 = l[match(ling$l1, l$iso2),]$family
ling$family2 = l[match(ling$l2, l$iso2),]$family
ling$area1 = l[match(ling$l1, l$iso2),]$autotyp.area
ling$area2 = l[match(ling$l2, l$iso2),]$autotyp.area
fgroup = cbind(ling$family1,ling$family2)
fgroup = apply(fgroup,1,sort)
ling$family.group = apply(fgroup,2,paste,collapse=":")
agroup = cbind(ling$area1,ling$area2)
agroup = apply(agroup,1,sort)
ling$area.group = apply(agroup,2,paste,collapse=":")
ling$rho.center = scale(ling$local_alignment)
```
Each observation is now assocaited with a language family pair:
```{r}
head(ling[,c("l1","l2","local_alignment",'family.group')])
```
And the same is true for area:
```{r}
tail(ling[,c("l1","l2","local_alignment",'area.group')])
```
Number of observations:
```{r}
# Number of datapoints:
nrow(ling)
# Number of unique languages:
length(unique(unlist(ling[,c("l1","l2")])))
# Number of unique langauge families:
uniqueFamilies = unique(unlist(ling[,c("family1","family2")]))
length(uniqueFamilies)
# Number of unique areas:
uniqueAreas = unique(unlist(ling[,c("area1","area2")]))
length(uniqueAreas)
```
Cross-over between language famlies and areas:
```{r}
tx = data.frame(lang= c(ling$l1,ling$l2),
fam = c(ling$family1,ling$family2),
area= c(ling$area1,ling$area2))
tx = tx[!duplicated(tx),]
table(tx$fam,tx$area)
```
\newpage
## LMER models
Mixed effects model, predicting Linguistic similaritys from cultural distances, with random intercept for family and area and random slope for cultural distance for family and area.
We compare a null model to a model with a fixed effect for cultural distance, with random intercepts for family and area, and random slopes for cultural distance by both.
```{r}
m0 = lmer(
rho.center ~ 1 +
(1 + cult.dist.center | family.group) +
(1 + cult.dist.center | area.group),
data = ling
)
summary(m0)
ling$comparison_count
hist(ling$comparison_count)
ling$comparison_count.center =
scale(ling$comparison_count)
m0.5 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 + cult.dist.center | family.group) +
(1 + cult.dist.center | area.group),
data = ling
)
anova(m0,m0.5)
m0 = lmer(
rho.center ~ 1 +
(1 + cult.dist.center | family.group) +
(1 + cult.dist.center | area.group),
data = ling
)
m0.5 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 + cult.dist.center | family.group) +
(1 + cult.dist.center | area.group),
data = ling
)
m1 = lmer(
rho.center ~ 1 +
comparison_count.center +
cult.dist.center +
(1 + cult.dist.center | family.group) +
(1 + cult.dist.center | area.group),
data = ling
)
anova(m0,m0.5,m1)
m1 = lmer(
rho.center ~ 1 +
cult.dist.center +
(1 + cult.dist.center | family.group) +
(1 + cult.dist.center | area.group),
data = ling
)
anova(m0,m1)
summary(m1)
m1 = lmer(
rho.center ~ 1 +
comparison_count.center +
cult.dist.center +
(1 + cult.dist.center | family.group) +
(1 + cult.dist.center | area.group),
data = ling
)
anova(m0,m0.5,m1)
summry(m1)
summary(m1)
ranef(m1)
mD0 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 | family.group) +
(1 | area.group) +
(1 | imputed_semantic_domain),
data = ling.dom)
mD1 = update(mD0, ~.+(0 + cult.dist.center | family.group))
ling.dom = read.csv(
lingDistancesByDomainFile,
stringsAsFactors = F)
ling.dom = ling.dom[!is.na(ling.dom$cult.dist),]
ling.dom = ling.dom[(ling.dom$l1 %in% cultisos) &
(ling.dom$l2 %in% cultisos),]
```
There are very few possible comparisons for Slovenian and Northern Sami, so we'll remove these:
```{r}
ling.dom = ling.dom[!(ling.dom$l1=="se" || ling.dom$l2 == "se"),]
ling.dom = ling.dom[!(ling.dom$l1=="sl" || ling.dom$l2 == "sl"),]
```
Match family and area data:
```{r}
ling.dom$family1 = l[match(ling.dom$l1, l$iso2),]$family
ling.dom$family2 = l[match(ling.dom$l2, l$iso2),]$family
ling.dom$area1 = l[match(ling.dom$l1, l$iso2),]$autotyp.area
ling.dom$area2 = l[match(ling.dom$l2, l$iso2),]$autotyp.area
# Paste language family names together,
# but order shouldn't matter, so sort first
fgroup = cbind(ling.dom$family1,ling.dom$family2)
fgroup = apply(fgroup,1,sort)
ling.dom$family.group = apply(fgroup,2,paste,collapse=":")
agroup = cbind(ling.dom$area1,ling.dom$area2)
agroup = apply(agroup,1,sort)
ling.dom$area.group = apply(agroup,2,paste,collapse=":")
```
Center the data:
```{r}
ling.dom$cult.dist.center = scale(ling.dom$cult.dist)
ling.dom$rho.center = scale(ling.dom$local_alignment)
ling.dom$comparison_count.center = scale(ling.dom$comparison_count)
mD0 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 | family.group) +
(1 | area.group) +
(1 | imputed_semantic_domain),
data = ling.dom)
mD1 = update(mD0, ~.+(0 + cult.dist.center | family.group))
mD2 = udpate(mDo, ~.
+ (1 + cult.dist.center | family.group))
mD2 = update(mDo, ~.
+ (1 + cult.dist.center | family.group))
mD2 = update(mD0, ~.
+ (1 + cult.dist.center | family.group))
anova(mD0,mD1,mD2)
mD3 = update(mD2, ~.
+ (0 + cult.dist.center | area.group))
mD4 = update(mD2, ~.
+ (1 + cult.dist.center | area.group))
anova(mD2,mD3,mD4)
mD0 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 | family.group) +
(1 | area.group) +
(1 | imputed_semantic_domain),
data = ling.dom)
mD1 = update(mD0, ~.
+(0 + cult.dist.center | family.group))
mD2 = update(mD0, ~.
+ (1 + cult.dist.center | family.group))
anova(mD0,mD1,mD2)
mD3 = update(mD2, ~.
+ (0 + cult.dist.center | area.group))
?lmer
mD3 = update(mD2, ~.
+ (0 + cult.dist.center | area.group),
control=lmerControl(optimizer = 'nelder_mead'))
?lmerControl
mD3 = update(mD2, ~.
+ (0 + cult.dist.center | area.group),
control=lmerControl(optimizer = 'Nelder_Mead'))
mD3 = update(mD2, ~.
+ (0 + cult.dist.center | area.group),
control=lmerControl(optimizer = 'Nelder_Mead',
optCtrl=list(maxfun=100000)))
mD3 = update(mD2, ~.
+ (0 + cult.dist.center | area.group),
control=lmerControl(optimizer = 'Nelder_Mead',
optCtrl=list(maxfun=1000000)))
mD3 = update(mD2, ~.
+ (0 + cult.dist.center | area.group),
control=lmerControl(optimizer = c('Nelder_Mead','bobyqa')))
mD3 = update(mD2, ~.
+ (0 + cult.dist.center | area.group),
control=lmerControl(optimizer = 'Nelder_Mead'))
mD4 = update(mD2, ~.
+ (1 + cult.dist.center | area.group))
mD4 = update(mD2, ~.
+ (1 + cult.dist.center | area.group)
control=lmerControl(optimizer = 'Nelder_Mead'))
mD4 = update(mD2, ~.
+ (1 + cult.dist.center | area.group),
control=lmerControl(optimizer = 'Nelder_Mead'))
anova(mD2,mD3,mD4)
summary(mD2)
mD2 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 + cult.dist.center | family.group) +
(1 | area.group) +
(1 | imputed_semantic_domain),
data = ling.dom)
anova(mD0,mD1,mD2)
mD3 = update(mD2, ~.
+ (0 + cult.dist.center | area.group),
control=lmerControl(optimizer = 'Nelder_Mead'))
mD4 = update(mD2, ~.
+ (1 + cult.dist.center | area.group),
control=lmerControl(optimizer = 'Nelder_Mead'))
anova(mD2,mD3,mD4)
mD3 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 + cult.dist.center | family.group) +
(1 | area.group) +
(0 + cult.dist.center | area.group) +
(1 | imputed_semantic_domain),
data = ling.dom)
mD4 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 + cult.dist.center | family.group) +
(1 + cult.dist.center | area.group) +
(1 | imputed_semantic_domain),
data = ling.dom)
anova(mD2,mD3,mD4)
mdom1 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 +cult.dist.center| family.group) +
(1 +cult.dist.center| area.group) +
(1 | imputed_semantic_domain),
data = ling.dom)
mdom2 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 +cult.dist.center| family.group) +
(1 +cult.dist.center| area.group) +
(1 + cult.dist.center| imputed_semantic_domain),
data = ling.dom)
anova(mdom1,mdom2)
mD5 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 + cult.dist.center | family.group) +
(1 + cult.dist.center| area.group) +
(1 + cult.dist.center | imputed_semantic_domain),
data = ling.dom)
mD6 = update(mD5, ~.+cult.dist.center)
anova(mD5,mD6)
mD5 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 + cult.dist.center | family.group) +
(1 | area.group) +
(1 + cult.dist.center | imputed_semantic_domain),
data = ling.dom)
mD6 = update(mD5, ~.+cult.dist.center)
anova(mD5,mD6)
summary(mD5)
summary(mD6)
dotplot(ranef(mD6))
sjp.lmer(mD6,'eff', show.ci = T)
dom.order = ranef(mD6)$imputed_semantic_domain
dom.order = rownames(dom.order[order(dom.order$cult.dist.center),])
px = sjp.lmer(mD6,'rs.ri', show.ci = T, prnt.plot = F)
pdx = px$plot[[3]]$data
pdx$Domain = factor(pdx$grp, levels = dom.order)
pdx$x = pdx$x *
attr(ling.dom$cult.dist.center,"scaled:scale") +
attr(ling.dom$cult.dist.center,"scaled:center")
pdx$y = pdx$y *
attr(ling.dom$rho.center,"scaled:scale") +
attr(ling.dom$rho.center,"scaled:center")
ggplot(pdx,
aes(x,y,colour=Domain)) +
geom_line() +
xlab("Cultural Distance") +
ylab("Linguistic similarity")
sjp.lmer(mD6,'eff', show.ci = T)
dom.order = ranef(mD6)$imputed_semantic_domain
dom.order = rownames(dom.order[order(dom.order$cult.dist.center),])
px = sjp.lmer(mD6,'rs.ri', show.ci = T, prnt.plot = F)
pdx = px$plot[[3]]$data
pdx$Domain = factor(pdx$grp, levels = dom.order)
pdx$x = pdx$x *
attr(ling.dom$cult.dist.center,"scaled:scale") +
attr(ling.dom$cult.dist.center,"scaled:center")
pdx$y = pdx$y *
attr(ling.dom$rho.center,"scaled:scale") +
attr(ling.dom$rho.center,"scaled:center")
ggplot(pdx,
aes(x,y,colour=Domain)) +
geom_line() +
xlab("Cultural Distance") +
ylab("Linguistic similarity")
px = sjp.lmer(mD6,'rs.ri', show.ci = T, prnt.plot = F)
px$plot
summary(mD6)
mD3 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 + cult.dist.center | family.group) +
(1 | area.group) +
(1 + cult.dist.center | area.group) +
(1 | imputed_semantic_domain),
data = ling.dom)
mD4 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 + cult.dist.center | family.group) +
(1 + cult.dist.center | area.group) +
(1 | imputed_semantic_domain),
data = ling.dom)
anova(mD2,mD3,mD4)
mD3 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 + cult.dist.center | family.group) +
(1 | area.group) +
(1 + cult.dist.center | area.group) +
(1 | imputed_semantic_domain),
data = ling.dom)
anova(mD2,mD3)
mdom1 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 +cult.dist.center| family.group) +
(1 | area.group) +
(1 | imputed_semantic_domain),
data = ling.dom)
mdom2 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 +cult.dist.center| family.group) +
(1 | area.group) +
(1 + cult.dist.center| imputed_semantic_domain),
data = ling.dom)
anova(mdom1,mdom2)
mD5 = lmer(
rho.center ~ 1 +
comparison_count.center +
(1 + cult.dist.center | family.group) +
(1 | area.group) +
(1 + cult.dist.center | imputed_semantic_domain),
data = ling.dom)
mD6 = update(mD5, ~.+cult.dist.center)
anova(mD5,mD6)
summary(mD6)
dotplot(ranef(mD6))
sjp.lmer(mD6,'eff', show.ci = T)
dom.order = ranef(mD6)$imputed_semantic_domain
dom.order = rownames(dom.order[order(dom.order$cult.dist.center),])
px = sjp.lmer(mD6,'rs.ri', show.ci = T, prnt.plot = F)
length(px$plot)
pdx = px$plot[[2]]$data
pdx$Domain = factor(pdx$grp, levels = dom.order)
pdx$x = pdx$x *
attr(ling.dom$cult.dist.center,"scaled:scale") +
attr(ling.dom$cult.dist.center,"scaled:center")
pdx$y = pdx$y *
attr(ling.dom$rho.center,"scaled:scale") +
attr(ling.dom$rho.center,"scaled:center")
ggplot(pdx,
aes(x,y,colour=Domain)) +
geom_line() +
xlab("Cultural Distance") +
ylab("Linguistic similarity")
ref.slopes.dom = data.frame(
domain = rownames(ranef(mD6)$imputed_semantic_domain),
slope = (fixef(mD6)["cult.dist.center"] +
ranef(mD6)$imputed_semantic_domain[,2]))
ref.slopes.dom[order(ref.slopes.dom$slope),]
head(ling.dom)
hist(ling.dom$comparison_count)
hist(ling.dom$comparison_count,breaks=40)
sum(ling.dom$comparison_count<10)
sum(ling.dom$comparison_count<20)
sum(ling.dom$comparison_count<15)
hist(ling.dom$cult.dist)
range(ling.dom$cult.dist)
?ecodist::mantel
hist = read.csv("../data/trees/IndoEuropean_historical_distances.csv", stringsAsFactors = F)
hist = hist[!duplicated(hist[,1]),!duplicated(hist[,1])]
rownames(hist) = hist[,1]
hist = hist[,2:ncol(hist)]
hist.m = as.matrix(hist)
colnames(hist.m) = rownames(hist.m)
hist.m = hist.m/max(hist.m)
```
Read the cultural distances as a matrix:
```{r}
cult.m = read.csv("../results/EA_distances/CulturalDistances.csv", stringsAsFactors = F)
rownames(cult.m) = cult.m[,1]
cult.m = cult.m[,2:ncol(cult.m)]
```
Flip the cultural distance into a cultural similarity measure:
```{r}
cult.m = 1-cult.m
```
Convert the linguistic similarities to a matrix.  This uses `igraph` to make an undirected graph from the long format with `local_alignment` as the edge weights, then output a matrix of adjacencies.
```{r}
grph <- graph.data.frame(ling[,c("l1",'l2','local_alignment')], directed=FALSE)
# add value as a weight attribute
ling.m = get.adjacency(grph, attr="local_alignment", sparse=FALSE)
rownames(ling.m) = l[match(rownames(ling.m),l$iso2),]$Language2
colnames(ling.m) = l[match(colnames(ling.m),l$iso2),]$Language2
```
Match the distance matrices
```{r}
in.analysis = intersect(rownames(ling.m),rownames(cult.m))
in.analysis = intersect(in.analysis, rownames(hist.m))
cult.m2 = cult.m[in.analysis,in.analysis]
ling.m2 = ling.m[in.analysis,in.analysis]
hist.m2 = hist.m[in.analysis,in.analysis]
```
Note that there are only `r length(in.analysis)` languages with data on lingusitic, cultural and historical distance.
```{r}
plot(as.dist(cult.m2),as.dist(ling.m2),
xlab="Cultural distance",
ylab="Linguistic similarity")
plot(as.dist(cult.m2),as.dist(hist.m2),
xlab="Cultural distance",
ylab="Historical distance")
plot(as.dist(ling.m2),as.dist(hist.m2),
xlab="Linguistic similarity",
ylab="Historical distance")
head(hist)
cult.m = read.csv("../results/EA_distances/CulturalDistances.csv", stringsAsFactors = F)
rownames(cult.m) = cult.m[,1]
cult.m = cult.m[,2:ncol(cult.m)]
hist(cult.m)
hist(as.numeric(cult.m))
hist(as.vector(cult.m))
hist(as.numeric(as.vector(cult.m)))
cult.m
as.vector(cult.m)
unlist(cult.m)
hist(unlist(cult.m))
ecodist::mantel(as.dist(cult.m2) ~
as.dist(ling.m2),
nperm = 100000)
ecodist::mantel(as.dist(ling.m2)~
as.dist(cult.m2) +
as.dist(hist.m2),
nperm = 100000)
# combine the distances for linguistic and cultural
# features for each domain
try(setwd("~/Documents/Bristol/word2vec/word2vec_DPLACE/processing/"))
l = read.csv("../data/FAIR_langauges_glotto_xdid.csv",
stringsAsFactors = F)
combineCultAndLingDistances = function(inputFile,outputFile){
ling.domain = read.csv(inputFile, stringsAsFactors = F)
ling.domain$cult.dist = NA
ling.langs = unique(c(ling.domain$l1,
ling.domain$l2))
names(ling.domain)[names(ling.domain)=="IDS_SEMANTICFIELD_l1"] = "imputed_semantic_domain"
domains = unique(ling.domain$imputed_semantic_domain)
for(dom in domains){
dom.filename = paste0('../results/EA_distances/',
gsub(" ","_",dom),"_long.csv")
if(file.exists(dom.filename)){
print(dom)
dx = read.csv(dom.filename, stringsAsFactors = F)
dx$l1 = l[match(dx$Var1,l$Language2),]$iso2
dx$l2 = l[match(dx$Var2,l$Language2),]$iso2
dx = dx[dx$l1 %in% ling.langs & dx$l2 %in% ling.langs,]
lx = ling.domain$imputed_semantic_domain==dom
ling.domain[lx,]$cult.dist = dx[match(
paste(ling.domain[lx,]$l1,ling.domain[lx,]$l2),
paste(dx$l1,dx$l2)
),]$value
}
}
ling.domain = ling.domain[,names(ling.domain)!="X"]
write.csv(ling.domain,outputFile, row.names = F)
}
#combineCultAndLingDistances(
#"../data/FAIR/semantic_distances_by_domain_extended.csv",
#"../results/EA_distances/All_Domains_with_ling.csv")
combineCultAndLingDistances(
"../data/FAIR/nel-wiki-k100-alignments-clean-by-language-pair-and-domain.csv",
"../results/EA_distances/nel-wiki-k100-clean_with_ling.csv")
combineCultAndLingDistances(
"../data/FAIR/nel-wiki-k100-alignments-by-language-pair-and-domain.csv",
"../results/EA_distances/nel-wiki-k100_with_ling.csv")
